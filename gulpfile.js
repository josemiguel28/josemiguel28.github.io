import pkg from 'gulp';const {src, dest, watch, parallel} = pkg;import less from 'gulp-less';import autoprefixer from 'autoprefixer';import postcss from 'gulp-postcss';import sourcemaps from 'gulp-sourcemaps';import cssnano from 'cssnano';import concat from 'gulp-concat';import terser from 'gulp-terser-js';import rename from 'gulp-rename';import imagemin from 'gulp-imagemin';import notify from 'gulp-notify';import cache from 'gulp-cache';import webp from 'gulp-webp';const paths = {    less: 'src/less/**/*.less',    js: 'src/js/**/*.js',    imagenes: 'src/img/**/*'};// css es una funci√≥n que se puede llamar automaticamentefunction css() {    return src(paths.less)        .pipe(sourcemaps.init())        .pipe(less())        .pipe(postcss([autoprefixer(), cssnano()]))        .pipe(sourcemaps.write('.'))        .pipe(dest('./public/build/css'));}// minifica el codigo de js y lo mappeafunction javascript() {    return src(paths.js)        .pipe(sourcemaps.init())        .pipe(concat('bundle.js')) // final output file name        .pipe(terser())        .pipe(sourcemaps.write('.'))        .pipe(rename({suffix: '.min'}))        .pipe(dest('./public/build/js'));}// minifica las imagenesfunction imagenes() {    return src(paths.imagenes)        .pipe(cache(imagemin({optimizationLevel: 3})))        .pipe(dest('./public/build/img'))        .pipe(notify({message: 'Imagen Completada'}));}// convierte las imagenes a webpfunction versionWebp() {    return src(paths.imagenes)        .pipe(webp())        .pipe(dest('./public/build/img'))        .pipe(notify({message: 'Imagen Completada'}));}// watcher de archivosfunction watchArchivos() {    watch(paths.less, css);    watch(paths.js, javascript);    watch(paths.imagenes, imagenes);    watch(paths.imagenes, versionWebp);}// exports.watchArchivos = watchArchivos;// exports.default = parallel(css, javascript, imagenes, versionWebp, watchArchivos);export const build = parallel(css, javascript, imagenes, versionWebp, watchArchivos);