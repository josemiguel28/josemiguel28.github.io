const { src, dest, watch , parallel } = require('gulp');const less = require('gulp-less');const autoprefixer = require('autoprefixer');const postcss    = require('gulp-postcss')const sourcemaps = require('gulp-sourcemaps')const cssnano = require('cssnano');const concat = require('gulp-concat');const terser = require('gulp-terser-js');const rename = require('gulp-rename');const imagemin = require('gulp-imagemin');const notify = require('gulp-notify');const cache = require('gulp-cache');const webp = require('gulp-webp');const paths = {    less: 'src/less/**/*.less',    js: 'src/js/**/*.js',    imagenes: 'src/img/**/*'}// css es una funci√≥n que se puede llamar automaticamentefunction css() {    return src(paths.less)        .pipe(sourcemaps.init())        .pipe(less())        .pipe(postcss([autoprefixer(), cssnano()]))        .pipe(sourcemaps.write('.'))        .pipe(dest('./public/build/css'));}//minifica el codigo de js y lo mappeafunction javascript() {    return src(paths.js)        .pipe(sourcemaps.init())        .pipe(concat('bundle.js')) // final output file name        .pipe(terser())        .pipe(sourcemaps.write('.'))        .pipe(rename({ suffix: '.min' }))        .pipe(dest('./public/build/js'))}//minifica las imagenesfunction imagenes() {    return src(paths.imagenes)        .pipe(cache(imagemin({ optimizationLevel: 3})))        .pipe(dest('./public/build/img'))        .pipe(notify({ message: 'Imagen Completada'}));}//convierte las imagenes a webpfunction versionWebp() {    return src(paths.imagenes)        .pipe( webp() )        .pipe(dest('./public/build/img'))        .pipe(notify({ message: 'Imagen Completada'}));}//watcher de archivosfunction watchArchivos() {    watch( paths.less, css );    watch( paths.js, javascript );    watch( paths.imagenes, imagenes );    watch( paths.imagenes, versionWebp );}exports.watchArchivos = watchArchivos;exports.default = parallel(css, javascript, imagenes, versionWebp, watchArchivos );exports.build = parallel(css, javascript, imagenes, versionWebp ); 